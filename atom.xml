<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iosplayer</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-27T13:22:26.301Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>请求网络json数据并加载到TableViewCell</title>
    <link href="http://yoursite.com/2020/11/27/2/"/>
    <id>http://yoursite.com/2020/11/27/2/</id>
    <published>2020-11-27T13:07:07.000Z</published>
    <updated>2020-11-27T13:22:26.301Z</updated>
    
    <content type="html"><![CDATA[<p>学习不止！</p><a id="more"></a><h2 id="swift写法"><a href="#swift写法" class="headerlink" title="swift写法"></a>swift写法</h2><h3 id="网络请求与数据处理"><a href="#网络请求与数据处理" class="headerlink" title="网络请求与数据处理"></a>网络请求与数据处理</h3><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>利用URL和URLSession.dataTask完成我们的api请求</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlString = <span class="string">"http://v.juhe.cn/toutiao/index"</span></span><br><span class="line">       <span class="keyword">let</span> url = <span class="type">URL</span>(string: urlString)!</span><br><span class="line">       <span class="keyword">let</span> session = <span class="type">URLSession</span>.shared</span><br><span class="line">       <span class="keyword">let</span> task = session.dataTask(with: url) &#123; (data, response, error) <span class="keyword">in</span></span><br><span class="line">       </span><br><span class="line">                                              &#125;</span><br></pre></td></tr></table></figure><h4 id="json数据的处理"><a href="#json数据的处理" class="headerlink" title="json数据的处理"></a>json数据的处理</h4><p><img src="/images/blog3-json.png" alt=""></p><p>首先我们需要知道，从网络上请求回来的数据是返回json数据的URL，并且其中还带着一些请求所返回的参数，于是我们接着在dataTaks中将请求回来的数据转换为json数据，然后再利用字典逐步提取其中的我们所需要的数据。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> error == <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fatalError</span>(<span class="string">"Task Error"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> jsonData = data <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fatalError</span>(<span class="string">"Data Error"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// Data 转 JSON</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> dic = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: jsonData, options: .allowFragments) <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">fatalError</span>(<span class="string">"JSONSerialization Error"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//提取JSON中的result</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> resultDic = dic[<span class="string">"result"</span>] <span class="keyword">as</span>? [<span class="type">String</span> : <span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">fatalError</span>(<span class="string">"JSONSerialization Error"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//提取result中的data</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> dataArray = resultDic[<span class="string">"data"</span>] <span class="keyword">as</span>? [<span class="type">Any</span>] <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">fatalError</span>(<span class="string">"JSONSerialization Error"</span>)</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>由于这只是个人的开发，所以对于错误和数据为空的处理较为简单。接着我们将提取出来的字典数据，转化为model，并且。</p><p><em>model应该创建于一个独立的文件当中</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">NewsModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> author_name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> category: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> date: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> thumbnail_pic_s: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> uniquekey: <span class="type">String</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> url: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>转化过程的代码应该也在dataTask中</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> modelArray = [<span class="type">NewsModel</span>]()</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> dataArray &#123;</span><br><span class="line">                    <span class="keyword">let</span> dic = item <span class="keyword">as</span>! [<span class="type">String</span>: <span class="type">String</span>]</span><br><span class="line">                    <span class="keyword">let</span> model = <span class="type">NewsModel</span>(author_name: dic[<span class="string">"author_name"</span>]!, category: dic[<span class="string">"category"</span>]!, date: dic[<span class="string">"date"</span>]!, thumbnail_pic_s: dic[<span class="string">"thumbnail_pic_s"</span>]!, title: dic[<span class="string">"title"</span>]!, uniquekey: dic[<span class="string">"uniquekey"</span>]!, url: dic[<span class="string">"url"</span>]!)</span><br><span class="line">                    modelArray.append(model)</span><br></pre></td></tr></table></figure><p>到此我们已经完成了第一步，网络请求和数据处理。接下来就是讲数据传递到cell中并加载数据。</p><h2 id="数据加载到cell"><a href="#数据加载到cell" class="headerlink" title="数据加载到cell"></a>数据加载到cell</h2><h4 id="加载的顺序"><a href="#加载的顺序" class="headerlink" title="加载的顺序"></a>加载的顺序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">视图控制器创建网络请求并在主线程中执行 --&gt; 网络请求获取数据并传入视图控制器</span><br><span class="line">网络请求获取数据并传入视图控制器 --&gt; 重加载cell的数据</span><br></pre></td></tr></table></figure><h4 id="数据的传递"><a href="#数据的传递" class="headerlink" title="数据的传递"></a>数据的传递</h4><p>首先我们需要在网络请求的方法中传入一个闭包用于传递数据，并且由于需要将数据的传递加载至主线程中所以闭包必须是逃逸闭包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">loadNetWork</span><span class="params">(block: @escaping <span class="params">(<span class="params">(Bool, Array&lt;NewsModel&gt;)</span></span></span></span> -&gt; <span class="type">Void</span>)) &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                block(<span class="literal">true</span>, modelArray)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们在cell中也要创建一个传递数据的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public func modelForCell(model: NewsModel) &#123;</span><br><span class="line">        titleLabel.text &#x3D; model.title</span><br><span class="line">        sourceLabel.text &#x3D; model.category</span><br><span class="line">        commentLabel.text &#x3D; model.author_name</span><br><span class="line">        timeLabel.text &#x3D; model.date</span><br><span class="line">        do &#123;</span><br><span class="line">            rightImage.image &#x3D; UIImage(data: try Data(contentsOf: URL(string: model.thumbnail_pic_s)!))</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在控制器中，我们需要创建网络请求，并且在cell的注册方法中调用modelForCell(model: NewsModel)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        view.addSubview(newsTableView)</span><br><span class="line">        let loader &#x3D; ListLoder()</span><br><span class="line">        loader.loadNetWork &#123; (success, model) in</span><br><span class="line">            self.data &#x3D; model</span><br><span class="line">            self.newsTableView.reloadData()</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;extnsion</span><br><span class="line">            func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;</span><br><span class="line">        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;reusedcell&quot;) as! NewsTableViewCell</span><br><span class="line">        cell.modelForCell(model: data[indexPath.row])</span><br><span class="line">        return cell</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到此，我们就已经完成了整个数据从网络请求到加载到cell当中，由于我个人的实力问题，部分代码还无法进行很好的解释，在后续的学习当中我会更新讲解</p><h2 id="附上最后的效果"><a href="#附上最后的效果" class="headerlink" title="附上最后的效果"></a>附上最后的效果</h2><p><img src="/images/blog3-final.png" alt=""></p><p><a href="https://github.com/jacktaonb/SampleAppForSwift.git" target="_blank" rel="noopener">附上我的仓库地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习不止！&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一个垃圾项目的总结</title>
    <link href="http://yoursite.com/2020/09/13/1/"/>
    <id>http://yoursite.com/2020/09/13/1/</id>
    <published>2020-09-13T13:20:07.000Z</published>
    <updated>2020-10-15T03:06:20.185Z</updated>
    
    <content type="html"><![CDATA[<p>轮子才是最好的工具和学习方法！</p><a id="more"></a><p>在开始做考核项目之前，我只学会常用的UI控件的使用，并且只能进行简单的使用，对于dalegate和datesource的使用几乎为0。</p><p>学了部分课程之后也只学会了部分控件的扩展，对于一些控件也没有进行实际操作过。个人感觉，如果你只是单纯通过书本或者视频又或是通过他人的代码而不是去亲手实践这些控件，你无法在你需要用到的时候快速的写出来，每次要用到的时候还需要去查询各种资料进行借鉴才能使用出来。这也是我的这个总结的由来，通过每一次实践中遇到的坑的总结，帮助自己填平以后学习的路。</p><h3 id="第一个问题：TableViewcell无法拉到屏幕底部"><a href="#第一个问题：TableViewcell无法拉到屏幕底部" class="headerlink" title="第一个问题：TableViewcell无法拉到屏幕底部"></a>第一个问题：TableViewcell无法拉到屏幕底部</h3><p>这个问题主要是由于当cell的数量超出屏幕底部的时候，TableView的height属性也应该相应的减小</p><p>如下代码所示</p><blockquote><p>let tableView = UITableView(frame: CGRect(x: 0, y: 0, width: frame.width, height: frame.height - 50))</p></blockquote><p><img src="/images/1.png" alt=""></p><p>cell无法显示到tapbar的底部</p><p>当将代码改成</p><blockquote><p>let tableView = UITableView(frame: CGRect(x: 0, y: 0, width: frame.width, height: frame.height - 145))</p></blockquote><p><img src="/images/2.png" alt=""></p><p>cell就可以完全的显示了。</p><p>由于这次项目只是显示固定个数的cell，所以是使用的具体的数值来调试的，当使用个数不定的cell的时候，需要将height和cell的个数进行相关联避免出现此类的bug。</p><h3 id="针对每个cell或者每个部位的navigationController"><a href="#针对每个cell或者每个部位的navigationController" class="headerlink" title="针对每个cell或者每个部位的navigationController"></a>针对每个cell或者每个部位的navigationController</h3><p>当使用多个cell时，大部分需要应该是每个cell会推进到不同的页面，所以在需要在</p><pre><code>(func tableView( _ tableView: UITableView, didSelectRowAt indexPath: IndexPath))</code></pre><p>针对每一个cell的indexPath.row使用控制流进行推进，但是我觉得应该在大量cell的时候会用更加简洁的方法而不是使用简单的控制流进行推进。同时也附上我的复杂代码</p><pre><code>(func tableView( _ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {if(indexPath.row == 0){    let detailVC = webViewController1()    navigationController?.pushViewController(detailVC, animated: true)}else if(indexPath.row == 1){    let detailVC=webViewController2()    navigationController?.pushViewController(detailVC, animated: true)})</code></pre><p>在下一次项目总结的时候，我会寻找到更加合适的方法来写次推进方法</p><h3 id="仍然未解决的问题"><a href="#仍然未解决的问题" class="headerlink" title="仍然未解决的问题"></a>仍然未解决的问题</h3><p>只使用一个viewcontroller来实现不同cell的访问网页的需求</p><h3 id="下一阶段的目标"><a href="#下一阶段的目标" class="headerlink" title="下一阶段的目标"></a>下一阶段的目标</h3><ol><li>学习DNSPageVIew和BWDView框架并尽可能的重写一个简化版的框架出来</li><li>学习（界面传值代理闭包通知）、数据储存、架构模式</li><li>继续学习课程，并完成一个完成的新闻类App。</li><li>寻找这个总结中所提到的更好的方案。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;轮子才是最好的工具和学习方法！&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
